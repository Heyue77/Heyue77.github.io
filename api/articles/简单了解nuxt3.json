{"title":"简单了解nuxt3","slug":"简单了解nuxt3","date":"2021-10-20T02:45:26.000Z","updated":"2022-02-16T02:59:07.729Z","comments":true,"path":"api/articles/简单了解nuxt3.json","photos":[],"link":"","excerpt":"什么是NUxt?Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染(SSR)的 Vue 应用提供了极其便利的开发体验。","covers":["/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/1638174037308.png","/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/92672015b4914784ae5a800c4a655e25.jpeg","/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/1638157343110.png","/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/1638243702014.png"],"content":"<h2 id=\"什么是NUxt\"><a href=\"#什么是NUxt\" class=\"headerlink\" title=\"什么是NUxt?\"></a>什么是NUxt?</h2><p>Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染(SSR)的 Vue 应用提供了极其便利的开发体验。</p>\n<span id=\"more\"></span>\n\n<p>Vue.js是开发SPA单页面应用的，传统的SPA应用是将bundle.js从服务端获取，然后在客户端解析并挂载到dom。</p>\n<p>Nuxt在服务端渲染，可以将组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记”激活”为客户端上完全可交互的应用程序。</p>\n<p>Nuxt适合做新闻、博客、电影、咨询这样的需要搜索引擎提供流量的项目。如果你要做到是移动端项目，就没有必要用nuxt这个框架了。</p>\n<img src=\"/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/1638174037308.png\" class>\n\n<h2 id=\"SPA-单页面应用\"><a href=\"#SPA-单页面应用\" class=\"headerlink\" title=\"SPA 单页面应用\"></a>SPA 单页面应用</h2><p>SPA 时代，主要是在客户端端使用了<code>history</code>或<code>hash</code>（主要是为了低版本浏览器的兼容）API，在首次请求经服务端路由输出整个应用程序后，接下来的路由都由前端掌控了，前端通过路由作为中心枢纽控制一系列页面（组件）的渲染(DOM的生成)加载和数据交互。</p>\n<blockquote>\n<p>优点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">页面之间的切换非常快</span><br><span class=\"line\">一定程度减少了后端服务器的压力</span><br><span class=\"line\">后端程序只需要提供api，不需要客户端到底是web端还是手机等</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>缺点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码，然后在客户端渲染页面。</span><br><span class=\"line\">不利于SEO搜索引擎优化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SEO-搜索引擎优化\"><a href=\"#SEO-搜索引擎优化\" class=\"headerlink\" title=\"SEO:搜索引擎优化\"></a>SEO:搜索引擎优化</h3><p>SEO是一种通过了解搜索引擎的运作规则（如何抓取网站页面，如何索引以及如何根据特定的关键字展现搜索结果排序等）来调整网站，以提高该网站在搜索引擎中某些关键词的搜索结果排名。</p>\n<p>我们之前说SPA单页面应用，通过AJAX获取数据，这就难保证我们的页面能被搜索引擎正常收到，并且有一些搜索引擎不支持执行js和通过ajax获取数据，那就更不用提SEO了。为了解决这个问题，SSR登场了</p>\n<h3 id=\"SSR-服务器端渲染\"><a href=\"#SSR-服务器端渲染\" class=\"headerlink\" title=\"SSR:服务器端渲染\"></a>SSR:服务器端渲染</h3><p>为了解决SPA不支持SEO的问题，我们也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，但是这样的HTML页面还不具备交互能力，所以还需要与SPA框架配合，在浏览器上“混合”成可交互的应用程序。</p>\n<p>基本流程是：</p>\n<blockquote>\n<p>在浏览器第一次访问某个 URI 资源的时候（首屏），Web 服务器根据路由拿到对应数据渲染并输出，且输出的数据中包含两部分：</p>\n<ul>\n<li>路由页对应的页面及已渲染好的数据</li>\n<li>完整的SPA程序代码</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在客户端首屏渲染完成之后，此时我们看到的其实已经是一个和之前的 SPA 相差无几的应用程序了，接下来我们进行的任何操作都只是客户端的应用进行交互，页面/组件由Web端渲染，路由也由浏览器控制，用户只需要和当前浏览器内的应用打交道就可以了。</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SSR优点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。</span><br><span class=\"line\">更快的内容到达时间(time-to-content)，不用等待所有的JS都下载完成，浏览器便能显示比较完整的页面了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SSR缺点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">占用更多的cpu和内存资源</span><br><span class=\"line\">一些常用的浏览器的api可能无法正常使用，比如window，document，alert等，如果使用的话需要对运行环境加以判断</span><br><span class=\"line\">开发调试会有一些麻烦，因为涉及到了浏览器及服务器，对于SPA的一些组件的生命周期的管理会变得复杂</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nuxt对SSR支持\"><a href=\"#Nuxt对SSR支持\" class=\"headerlink\" title=\"Nuxt对SSR支持\"></a>Nuxt对SSR支持</h3><p>从头搭建一个服务端渲染的应用是相当复杂的。幸运的是，我们有一个优秀的社区项目 <a href=\"https://nuxtjs.org/\">Nuxt.js</a> 让这一切变得非常简单。Nuxt 是一个基于 Vue 生态的更高层的框架，为开发服务端渲染的 Vue 应用提供了极其便利的开发体验。</p>\n<p>Nuxt.js 是使用 Webpack 和 Node.js 进行封装的基于Vue的SSR框架，预设了利用Vue.js开发<strong>服务端渲染</strong>的应用所需要的各种配置，使用它你可以不需要自己搭建一套 SSR 程序，而是通过其约定好的文件结构和API就可以实现一个首屏渲染的 Web 应用。</p>\n<p>Nuxt.js 主要关注的是应用的 UI渲染。</p>\n<h2 id=\"SSR原理\"><a href=\"#SSR原理\" class=\"headerlink\" title=\"SSR原理\"></a>SSR原理</h2><img src=\"/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/92672015b4914784ae5a800c4a655e25.jpeg\" class>\n\n<p><strong>官方文档</strong>:<a href=\"https://ssr.vuejs.org/zh/\">https://ssr.vuejs.org/zh/</a></p>\n<p>如上图所示：webpack将 Source 打包出两个bundle文件。</p>\n<p>服务端渲染：Server Bundle用于服务端渲染，主要是获取异步数据，同步到组件中，并将组件渲染成HTML返回到前端，但是<strong>vue-ssr不能绑定javascript事件</strong>，也就是说服务器端使用vue-ssr渲染出来的返回到浏览器的也只能是HTML+CSS。</p>\n<p>客户端渲染：Client Bundle 用于客户端渲染，之前说过服务器不能增加事件，那只能前端增加。所以我们看到SSR渲染的网页源码中有<code>window.__NUXT__=...</code>代码，这是后端和前端在同步共享数据。后端取到数据之后渲染成真正的HTML和css返回。客户端也是从共享数据里面获取数据，客户端的渲染主要做2件事：</p>\n<blockquote>\n<p>1.拿到数据，使用    virtual-dom进行预渲染，然后和服务端渲染出来的进行比对，比对两边渲染的内容是不是一致的</p>\n<p>2.对DOM元素的事件进行绑定，也就是回答的问题，事件在这块进行的处理</p>\n</blockquote>\n<h2 id=\"Nuxt3特点\"><a href=\"#Nuxt3特点\" class=\"headerlink\" title=\"Nuxt3特点\"></a>Nuxt3特点</h2><img src=\"/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/1638157343110.png\" class>\n\n<h3 id=\"开发前的准备\"><a href=\"#开发前的准备\" class=\"headerlink\" title=\"开发前的准备\"></a>开发前的准备</h3><ul>\n<li>**Node.js   —- 使用新版本的node **</li>\n<li><strong>Visual Studio Code</strong>  </li>\n<li><strong>Volar Extension</strong> </li>\n<li>使用比较新的浏览器(不要使用edge)</li>\n</ul>\n<h2 id=\"Nuxt项目创建\"><a href=\"#Nuxt项目创建\" class=\"headerlink\" title=\"Nuxt项目创建\"></a>Nuxt项目创建</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx nuxi init nuxt3-app</span><br><span class=\"line\"></span><br><span class=\"line\">yarn install</span><br><span class=\"line\"><span class=\"comment\">// 注意：用yarn来装包，不要使用npm</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn dev -o</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/10/20/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3nuxt3/1638243702014.png\" class>","categories":[],"tags":[{"name":"nuxt3","slug":"nuxt3","count":1,"path":"api/tags/nuxt3.json"}]}