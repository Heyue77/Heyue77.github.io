{"title":"react学习笔记总结(二)","slug":"react学习笔记总结-二","date":"2020-02-17T06:54:11.000Z","updated":"2022-02-16T07:30:49.653Z","comments":true,"path":"api/articles/react学习笔记总结-二.json","photos":[],"link":"","excerpt":"上一篇说到了react响应式设计原理和数据的绑定方法，下面继续总结","covers":["/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622132004286.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/2019062213232742.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622132758440.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622133315362.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622134559613.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/2019062214101888.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622141315735.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622141417849.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622141644943.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/201906221419217.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622143148317.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622143626814.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622143653851.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622144802622.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622144908910.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622150811161.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622150933258.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622152852663.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622160505640.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622160830358.png","/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622161444469.png"],"content":"<p>上一篇说到了react响应式设计原理和数据的绑定方法，下面继续总结</p>\n<span id=\"more\"></span>\n\n<h2 id=\"第九章：列表渲染\"><a href=\"#第九章：列表渲染\" class=\"headerlink\" title=\"第九章：列表渲染\"></a>第九章：列表渲染</h2><p>还是那句话，数据驱动试图，数据不能写死，下面我们把自己写死的两个li去掉，遍历状态里的list。为保证数据不为空，我们在list初始化的时候就加两个数据进去。<br><code>list: [&#39;学习react&#39;,&#39;学习vue&#39;]</code></p>\n<ul>\n<li>重点来了</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622132004286.png\" class>\n\n<ul>\n<li>map是es6的方法，不太懂的自行补学<br><strong>踩坑点</strong></li>\n<li>li标签的取值item不加花括号{}，报错，注意，{}是jsx语法环境，不加不识别</li>\n<li>遍历的子元素没有key值，什么叫没有key值，就是上边那样</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/2019062213232742.png\" class>\n\n<ul>\n<li>在这里可以先用索引代替，但并不是个好方法<br><code>return &#123;item&#125;</code></li>\n</ul>\n<h3 id=\"关于遍历子元素使用索引做key的弊端\"><a href=\"#关于遍历子元素使用索引做key的弊端\" class=\"headerlink\" title=\"关于遍历子元素使用索引做key的弊端\"></a>关于遍历子元素使用索引做key的弊端</h3><p> 之前说过，react是基于虚拟dom的，涉及diff算法。先看下下边这个图 </p>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622132758440.png\" class>\n\n<ul>\n<li>虚拟dom会创建两个js的对象用于前后数据比对，来决定是否更新数据。如上图那样，这两个对象的依赖是靠索引建立的，这样的话，一旦索引发生改变，这个依赖就需要重新建立，白白浪费了时间，有性能问题。建议在数据源上加个id标识作为key，或者使用自身作为key，即a对a，b对b</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622133315362.png\" class>\n\n<h3 id=\"添加事务\"><a href=\"#添加事务\" class=\"headerlink\" title=\"添加事务\"></a>添加事务</h3><ul>\n<li>折腾半天，下边为按钮添加事件处理函数，方法和之前一样</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.addTodoItem&#125;</span>&gt;</span> 添加 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addTodoItem=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">    <span class=\"attr\">list</span>: [...this.state.list,<span class=\"built_in\">this</span>.state.inputValue],</span><br><span class=\"line\">    <span class=\"attr\">inputValue</span>:<span class=\"string\">&quot;&quot;</span><span class=\"comment\">// 输入框置空，方便下次输入</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上述…是es6扩展运算符，相当于将上述 list: [‘学习react’,‘学习vue’]，拆解为’学习react’,‘学习vue’，然后和后加入的一项重新组成新数组[‘学习react’,‘学习vue’,‘新事务’]</li>\n</ul>\n<h3 id=\"键盘监听\"><a href=\"#键盘监听\" class=\"headerlink\" title=\"键盘监听\"></a>键盘监听</h3><ul>\n<li>下面实现一个敲回车添加的功能</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622134559613.png\" class>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enterAdd=<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(e.keyCode===<span class=\"number\">13</span>)&#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.addTodoItem();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除事务\"><a href=\"#删除事务\" class=\"headerlink\" title=\"删除事务\"></a>删除事务</h3><ul>\n<li>现在我们想实现这样一个功能，点击某一项可以删除它</li>\n<li>核心点两个，传递参数，调用数组的splice方法</li>\n<li>为ul的每个li注册点击事件，并把索引传过去</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>  <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.delTodoItem.bind(this,index)&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>delTodoItem</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delTodoItem=<span class=\"function\">(<span class=\"params\">index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> list=<span class=\"built_in\">this</span>.state.list;<span class=\"comment\">//备份下数据，不要直接修改</span></span><br><span class=\"line\">   list.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">   <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">     <span class=\"attr\">list</span>: list<span class=\"comment\">//其实这里可以简写为一个list</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Fragment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = React.Component</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props) <span class=\"comment\">//调用父类的构造函数，固定写法，虽然props不用可以不写，但官方推荐你这样写</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123;</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">// 关联input输入的值</span></span><br><span class=\"line\">      <span class=\"attr\">list</span>: [<span class=\"string\">&#x27;学习react&#x27;</span>,<span class=\"string\">&#x27;学习vue&#x27;</span>]    <span class=\"comment\">//事务列表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  changeInputValue = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: e.target.value</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addTodoItem=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">list</span>: [...this.state.list,<span class=\"built_in\">this</span>.state.inputValue],</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  enterAdd=<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.keyCode===<span class=\"number\">13</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.addTodoItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  delTodoItem=<span class=\"function\">(<span class=\"params\">index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list=<span class=\"built_in\">this</span>.state.list;</span><br><span class=\"line\">    list.splice(index,<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">list</span>: list</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onKeyUp</span>=<span class=\"string\">&#123;this.enterAdd&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.inputValue&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.changeInputValue&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.addTodoItem&#125;</span>&gt;</span> 添加 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          &#123;</span></span><br><span class=\"line\"><span class=\"xml\">            this.state.list.map((item,index)=&gt;&#123;</span></span><br><span class=\"line\"><span class=\"xml\">              return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item&#125;</span>  <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.delTodoItem.bind(this,index)&#125;</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            &#125;)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoList;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第十章-开发辅助\"><a href=\"#第十章-开发辅助\" class=\"headerlink\" title=\"第十章 开发辅助\"></a>第十章 开发辅助</h2><p> 这里介绍一款好用的vscode插件。俗话说，磨刀不误砍柴工，刀快才好用，开发也是这个道理，有优秀的编辑器，优秀的插件，没理由不用啊。 </p>\n<h3 id=\"插件推荐\"><a href=\"#插件推荐\" class=\"headerlink\" title=\"插件推荐\"></a>插件推荐</h3><img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/2019062214101888.png\" class>\n\n<ul>\n<li>安装很简单，插件商店一搜就好了，完事点安装</li>\n<li>使用看文档，都很清晰</li>\n</ul>\n<p> 举几个例子 </p>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622141315735.png\" class>\n\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622141417849.png\" class>\n\n<ul>\n<li>具体的自行感受，给我的感觉是6的飞起，越来越喜欢vscode</li>\n</ul>\n<h3 id=\"自定义代码段\"><a href=\"#自定义代码段\" class=\"headerlink\" title=\"自定义代码段\"></a>自定义代码段</h3><img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622141644943.png\" class>\n\n<ul>\n<li>你也可以按需要自己搞一搞</li>\n</ul>\n<h3 id=\"快捷键映射\"><a href=\"#快捷键映射\" class=\"headerlink\" title=\"快捷键映射\"></a>快捷键映射</h3><ul>\n<li>之前我一直用sublime，快捷键也用习惯了，还好vscode支持快捷键映射</li>\n<li>还是刚才那个界面，点击按键映射</li>\n<li>下载，完活</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/201906221419217.png\" class>\n\n<h2 id=\"第十一章-组件拆分\"><a href=\"#第十一章-组件拆分\" class=\"headerlink\" title=\"第十一章 组件拆分\"></a>第十一章 组件拆分</h2><p> 上边我们已经实现了todoList的基本功能，但是，都堆在一个文件里，不太好看，需要抽离一下。可以将每一个li抽成一个小组件TodoItem。 </p>\n<h3 id=\"创建TodoItem小组件\"><a href=\"#创建TodoItem小组件\" class=\"headerlink\" title=\"创建TodoItem小组件\"></a>创建TodoItem小组件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoItem</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.state = &#123;  &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>TodoItem<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoItem;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>试着在TodoList里边使用一下</p>\n<p><strong>TodoList.js</strong></p>\n<ul>\n<li>导入</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> TodoItem <span class=\"keyword\">from</span> <span class=\"string\">&quot;./TodoItem&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> 使用 </li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TodoItem</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> 效果图 </li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622143148317.png\" class title=\"% } 这里我们改一下最开始的代码，让代码看起来更简洁 {% asset_img 20190622143252243.png\">\n\n<p> <strong>进一步拆分</strong> </p>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622143626814.png\" class>\n\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622143653851.png\" class>\n\n<ul>\n<li>接下来，重点来了，以上的拆分还不健全，因为数据都在父组件，儿子TodoItem还毛毛都没有呢。</li>\n</ul>\n<h3 id=\"父-gt-子组件传值\"><a href=\"#父-gt-子组件传值\" class=\"headerlink\" title=\"父-&gt;子组件传值\"></a>父-&gt;子组件传值</h3><ul>\n<li>最基础的，属性传值就好，像这样</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622144802622.png\" class>\n\n<ul>\n<li>上述的父-&gt;子传值就结束了，todo_item是自定义的，保证和儿子接收的名字一样就行</li>\n<li>子组件需要用this.props.xxx的形式进行接收，这里就是this.props.todo_item</li>\n<li>子组件</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622144908910.png\" class>\n\n<ul>\n<li>你会发现控制台报错了，还是key的问题。</li>\n<li>你是不是想接着传值，像刚才那样？</li>\n<li>如果是，恭喜你，又踩坑了。</li>\n<li>此时，我们已经抽了一个小组件出来，key应该加在小组件上，而不是小组件里边的li身上</li>\n</ul>\n<h3 id=\"子-gt-父组件传递数据\"><a href=\"#子-gt-父组件传递数据\" class=\"headerlink\" title=\"子-&gt;父组件传递数据\"></a>子-&gt;父组件传递数据</h3><ul>\n<li>上述添加没问题，但是删除抽离后还没有搞。我们想抽离后实现抽离前的效果，问题来了，现在关键就是在子组件中调用父组件的删除方法。</li>\n</ul>\n<p><strong>问题关键</strong></p>\n<ul>\n<li>传方法</li>\n<li>传索引</li>\n<li>子组件定义方法并接收父组件传递的数据，执行事件处理函数</li>\n<li>子组件通过调用父组件的方法实现数据回传</li>\n</ul>\n<p>父组件–传方法–传索引</p>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622150811161.png\" class>\n\n<p> 子组件–定义方法–点击执行事件处理函数–本质就是执行父组件的删除方法 </p>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622150933258.png\" class>\n\n<h2 id=\"第十二章：数据流方向\"><a href=\"#第十二章：数据流方向\" class=\"headerlink\" title=\"第十二章：数据流方向\"></a>第十二章：数据流方向</h2><p> 如果之前学过angular，应该知道双向数据绑定这个概念，指令是ng-model。angular是双向数据流，父子组件通信相对方便。但有些时候，我们不想儿子改变父亲的值，只能用，不能改。react这点最明显，vue中表单控件还有个v-model双向数据绑定的指令。 </p>\n<ul>\n<li>还是上边的例子，在父组件传值的时候可以把list直接传过去，但是对子组件是只读的，一旦你试图修改就会报错。在不考虑redux，flux等状态管理框架的时候，父子组件通信常用的就是上边的方法。</li>\n</ul>\n<h3 id=\"与jQuery结合\"><a href=\"#与jQuery结合\" class=\"headerlink\" title=\"与jQuery结合\"></a>与jQuery结合</h3><ul>\n<li>首先，确实这两个可以一起用。</li>\n<li>react只关心挂载的根元素root，其他的不关心，爱咋搞咋搞。</li>\n<li>换句话说，jquery不操控root内的元素就没事</li>\n</ul>\n<p><strong>纠结点</strong></p>\n<ul>\n<li>实际上，这个问题没什么实际意义，技术选型本身就有问题</li>\n<li>一个主张操控dom，一个不推荐操控dom，把这两个放一起打架吗？</li>\n<li>也许你想试试，好，那就试试</li>\n<li>打开public文件夹下的index.html,没用注释删除</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;shortcut icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;theme-color&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;#000000&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;manifest&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span>alert($)<span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> 确实能用，但没什么卵用 </li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622152852663.png\" class>\n\n<h2 id=\"第十三章：ref的使用\"><a href=\"#第十三章：ref的使用\" class=\"headerlink\" title=\"第十三章：ref的使用\"></a>第十三章：ref的使用</h2><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><blockquote>\n<p> react，涉及dom操作的都不推荐，ref也是如此，当然，ref也不是一无是处。 </p>\n</blockquote>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><ul>\n<li>此时，e.target.value就被取代了</li>\n<li>事件参数e也没用了，可以去掉</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622160505640.png\" class>\n\n<p> 你还可以这样用<br><code>ref=&#123;(input)=&gt;&#123;this.input=input&#125;&#125;</code> </p>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622160830358.png\" class>\n\n<ul>\n<li>补充：this.setState()是异步的，如果你想操控dom，可以写在它的回调函数里。</li>\n</ul>\n<h2 id=\"第十四章：生命周期\"><a href=\"#第十四章：生命周期\" class=\"headerlink\" title=\"第十四章：生命周期\"></a>第十四章：生命周期</h2><ul>\n<li>很重要的东西，先来个图</li>\n</ul>\n<img src=\"/2020/02/17/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%BA%8C/20190622161444469.png\" class>\n\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>生命周期就像一个人出生到死亡的过程，在react中，这些生命周期钩子函数十分有用，很多场合我们都会遇到。此外，值得注意的是，react每个组件都有上述提到的所有周期函数，并不是根组件或父组件才有。严格说，生命周期函数会在组件渲染到销毁这个过程的某一个时刻自动执行，不需要你多费心。但是render特别，所有的生命周期函数react都有默认实现，唯独没有render的实现。也就是说，组件里你可以什么周期函数都不写，构造函数也可以不要，但是不写render不行。</p>\n</blockquote>\n<h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><blockquote>\n<p>这个阶段主要是定义属性（props）和状态(state)，当然，还有this指向的绑定。<br>在构造函数中，constructor是一个特别的存在，算不算生命周期函数都行，看你怎么理解。<br>构造函数在类加载就会自动执行，完成数据初始化。<br>如果你学过java，这点应该体会的更清楚，有参构造，无参构造，构造方法重载巴拉巴拉。。。</p>\n</blockquote>\n<h3 id=\"Mounting阶段\"><a href=\"#Mounting阶段\" class=\"headerlink\" title=\"Mounting阶段\"></a>Mounting阶段</h3><p><strong>componentWillMount</strong></p>\n<blockquote>\n<p> 在组件即将被挂载到页面的时刻执行，只执行一次，没啥鸟用，就是个陪跑的对称函数.能在这里放的，直接放构造函数就行。 </p>\n</blockquote>\n<p><strong>render</strong></p>\n<ul>\n<li>页面state或props发生变化时执行。</li>\n</ul>\n<p><strong>componentDidMount</strong></p>\n<blockquote>\n<p> 组件挂载完成时被执行,只执行一次。这个好用，基本上ajax请求都在这里发。 </p>\n</blockquote>\n<p><strong>补充：生命周期函数执行顺序与你书写顺序无关。</strong></p>\n<h3 id=\"update阶段\"><a href=\"#update阶段\" class=\"headerlink\" title=\"update阶段\"></a>update阶段</h3><p><strong>componentWillReceiveProps</strong></p>\n<blockquote>\n<p> 子组件接收到父组件传递过来的参数，且父组件render函数重新，非第一次存在dom中被执行，不太常用。 </p>\n</blockquote>\n<p> <strong>shouldComponentUpdate（nextProps,nextState）</strong> </p>\n<blockquote>\n<p> 该函数会在组件更新之前，自动被执行。它要求返回一个布尔类型的结果，必须有返回值，默认是true，如果是false，后续组件就不会进行更新。可以用来做性能优化，比较组件前后状态属性是否一致，不一致才去更新。 </p>\n</blockquote>\n<p> <strong>componentWillUpdate</strong> </p>\n<blockquote>\n<p> 用处不大，发生在组件更新前，如果shouldComponentUpdate返回false，这个函数就不执行了 </p>\n</blockquote>\n<p><strong>componentDidUpdate</strong></p>\n<ul>\n<li>componentDidUpdate 组件更新之后执行</li>\n</ul>\n<h3 id=\"销毁阶段\"><a href=\"#销毁阶段\" class=\"headerlink\" title=\"销毁阶段\"></a>销毁阶段</h3><p><strong>componentWillUnmount</strong></p>\n<blockquote>\n<p> 你也许会好奇，别的函数都是兄弟姐妹的，这个就没陪跑的吗？<br>确实没有，销毁就销毁了，没啥好接着做的。<br>在这里可以做些善后工作，清除定时器啥的。 </p>\n</blockquote>\n<h2 id=\"第十五章-axios发送-ajax请求\"><a href=\"#第十五章-axios发送-ajax请求\" class=\"headerlink\" title=\"第十五章 axios发送 ajax请求\"></a>第十五章 axios发送 ajax请求</h2><ul>\n<li>首先说明一点，axios不是react独有，vue也可以用</li>\n<li>第三方的东西使用起来三步走</li>\n<li>第一，安装，第二，查文档，第三，复制粘贴</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>npm install -save axios<br>或者 yarn add axios</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p> <a href=\"https://www.npmjs.com/package/axios\">文档</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span> <span class=\"comment\">// 也行</span></span><br><span class=\"line\">axios.get(apiUrl)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle success</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .finally(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// always executed</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩展–fetch-jsonp\"><a href=\"#扩展–fetch-jsonp\" class=\"headerlink\" title=\"扩展–fetch-jsonp\"></a>扩展–fetch-jsonp</h3><ul>\n<li>这个不支持jsonp跨域，需要的话可以用fetch-jsonp</li>\n<li><a href=\"https://www.npmjs.com/package/fetch-jsonp\">文档</a></li>\n</ul>\n<p><strong>安装</strong><br>npm install fetch-jsonp</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fetchJsonp <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fetch-jsonp&#x27;</span></span><br><span class=\"line\">fetchJsonp(<span class=\"string\">&#x27;/users.jsonp&#x27;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.json()</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;parsed json&#x27;</span>, json)</span><br><span class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;parsing failed&#x27;</span>, ex)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第十六章-生产环境vs开发环境\"><a href=\"#第十六章-生产环境vs开发环境\" class=\"headerlink\" title=\"第十六章 生产环境vs开发环境\"></a>第十六章 生产环境vs开发环境</h2><blockquote>\n<p> 极致快vs高效率 </p>\n</blockquote>\n<ul>\n<li>前者代码需要压缩，后者不需要</li>\n<li>前者删除注释，后者不需要</li>\n<li>前者不需要热更新，后者需要</li>\n<li>测试工具前者不需要，后者需要</li>\n<li>语法检查工具前者不需要，后者需要</li>\n</ul>\n<p>暂时总结就这么多，后续更新。。。</p>\n","categories":[],"tags":[{"name":"react","slug":"react","count":2,"path":"api/tags/react.json"}]}