{"title":"react学习笔记总结(一)","slug":"react学习笔记总结-一","date":"2020-02-16T03:21:53.000Z","updated":"2022-02-16T06:53:24.975Z","comments":true,"path":"api/articles/react学习笔记总结-一.json","photos":[],"link":"","excerpt":"第一章：前言大前端的时代，工程化，组件化的思想促成了前后端分工。前端不再满足小小的页面布局，正在扮演着愈发重要的角色。","covers":["/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622061636959.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622071313846.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622072252224.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622072553595.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622073518837.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622074305705.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622074249332.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622074648146.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622075909285.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622080039613.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622080413857.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622080906782.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622081038446.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622081318141.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622092458703.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622094428181.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622095241342.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622095500728.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622095440861.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622102941108.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622120651916.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622123219745.png","/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622131244195.png"],"content":"<h2 id=\"第一章：前言\"><a href=\"#第一章：前言\" class=\"headerlink\" title=\"第一章：前言\"></a>第一章：前言</h2><p>大前端的时代，工程化，组件化的思想促成了前后端分工。前端不再满足小小的页面布局，正在扮演着愈发重要的角色。</p>\n<span id=\"more\"></span>\n\n<p>整理这套笔记，我也参考了很多东西。在学习过程中，我看了三套视频教程，传智的，IT营的，慕课网的。此外，还有必读的官网教程和一本书《深入浅出React和Redux》。这本书业界很有名，需要的点击书名即可下载，提取码：8e31。话不多说，下面开始正文。</p>\n<h3 id=\"React简介\"><a href=\"#React简介\" class=\"headerlink\" title=\"React简介\"></a>React简介</h3><ul>\n<li><a href=\"https://reactjs.org/\">https://reactjs.org</a> 官网<br>A JavaScript library for building user interfaces</li>\n</ul>\n<p>官网的解释就这一句，用于构建用户界面的js库。给我的感觉是低调奢华有内涵，实际上，你会发现，越是优秀的事物越低调。</p>\n<p>react严格上来讲同vue一样，算是库而不是框架。之所以习惯性的叫做框架，是因为它们强大的生态系统。</p>\n<p>拿react来说，UI层的react本身，数据层状态管理redux，flux，用于处理异步请求的axios，解决跨域问题的fetch-jsonp,路由react-router,此外，还有超级活跃的社区。</p>\n<p><strong>火热程度</strong></p>\n<p>不夸张的说，背靠脸书的react从2013发布到现在，说是全球最火也不为过。当然，这种情况在国外更明显，国内目前还是vue占上风，但react市场份额同样不小。有这样一种说法，react和vue虚拟dom设计思想的出现，终究会引领新的潮流，传统主打操作dom的jQuery将逐渐退出舞台。</p>\n<p><strong>具体</strong><br>目前国内的一二线互联网公司大部分都在使用React进行开发，比如阿里、美团、百度、去哪儿、网易 、知乎这样的一线互联网公司都把React作为前端主要技术栈。或者你可以去招聘网站看看，只要是前端，基本上三大框架都要求你至少懂一个，当然，更多的要求你懂vue或者react。至于angular，相对笨重，现在份额少的可怜。</p>\n<p><strong>React Fiber</strong><br>这是一个新名词，指的是react16的版本，这一版本性能和易用度上，都有很大的提升。除了火爆的react本身，还有用于移动端开发的ReactNative和用于虚拟现实技术开发的React VR。所以说，react的前景非常广，前端学习react是大势所趋。最后留个图，自行体会。</p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622061636959.png\" class>\n\n<p><strong>学习react的优势</strong></p>\n<ul>\n<li>持续高热度:关注的人多，你遇到问题解决的可能性和途径就会多。</li>\n<li>良好生态:几乎所有开发需求都有成熟的解决方案。</li>\n<li>官方文档超级详细：很多react相关书都是参考官方文档</li>\n<li>容易上手：只需要你有基本的html+css+js基础，主要是js</li>\n<li>小伙伴多：在活跃的react社区，说不定还能解决你的单身问题。</li>\n</ul>\n<h3 id=\"开车前的提醒\"><a href=\"#开车前的提醒\" class=\"headerlink\" title=\"开车前的提醒\"></a>开车前的提醒</h3><blockquote>\n<p>严格说，react 的学习门槛不是很高，但如果你还不知道什么是js，建议先去找门课程学一下。react对于彻底零基础的小白来说，还是有些不太好理解的地方，比如jsx语法，你会觉得很怪异。在这之前，如果你学过es6，node或者vue最好，这样你学起来会更容易。此外，你最好对包管理工具有一定的了解，项目中安装依赖会常用，比如npm或者脸书官方的yarn。</p>\n</blockquote>\n<h3 id=\"关于笔记阅读\"><a href=\"#关于笔记阅读\" class=\"headerlink\" title=\"关于笔记阅读\"></a>关于笔记阅读</h3><blockquote>\n<p> 首先，不得不重申一下，这只是笔记而已，没有视频教程。适合有一定基础的小白系统了解react使用，也适用于有一定react基础的人复习使用。基本上该上代码的地方都会上代码，也会标注我踩过的坑，这一点不必担心。如果代码量大，我会发个百度网盘链接放源码，代码量少就贴图或者粘贴代码。 </p>\n</blockquote>\n<p> <strong>划重点，这里讲的只是react入门基础，也只涉及react本身，没有redux之类的。</strong> </p>\n<h3 id=\"学习社区推荐–掘金\"><a href=\"#学习社区推荐–掘金\" class=\"headerlink\" title=\"学习社区推荐–掘金\"></a>学习社区推荐–掘金</h3><ul>\n<li>这里我只想推荐一个，<a href=\"https://juejin.im/\">掘金</a>。</li>\n<li>自认为掘金是最活跃，技术含量最高的程序员社区，里边大牛很多。</li>\n<li>如果你不一直摸鱼划水，在里边确实能学到很多东西。</li>\n</ul>\n<h2 id=\"第二章：react-vs-vue\"><a href=\"#第二章：react-vs-vue\" class=\"headerlink\" title=\"第二章：react vs vue\"></a>第二章：react vs vue</h2><ul>\n<li>最热和最火的两个框架碰到一起，关于它们的对比就永远不会少。</li>\n<li>先来个简单的比较</li>\n<li>相同点</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">良好的生态系统，轻量级框架。</span><br><span class=\"line\">虚拟dom</span><br><span class=\"line\">数据驱动视图，组件化思想。</span><br></pre></td></tr></table></figure>\n\n<p><strong>react优点</strong>    </p>\n<ul>\n<li>灵活性和响应性：它提供最大的灵活性和响应能力。    </li>\n<li>虚拟DOM：基于文档对象模型，允许浏览器友好地以HTML，XHTML或XML格式排列文档    </li>\n<li>丰富的JavaScript库：来自世界各地的贡献者正在努力添加更多功能。    </li>\n<li>可扩展性：由于其灵活的结构和可扩展性，React已被证明对大型应用程序更好。    </li>\n<li>不断发展： React得到了Facebook专业开发人员的支持，他们不断寻找改进方法。    </li>\n<li>Web或移动平台: React提供React Native平台，可通过相同的React组件模型为iOS和Android开发本机呈现的应用程序</li>\n</ul>\n<p><strong>缺点</strong><br><code>陡峭的学习曲线：由于复杂的设置过程，属性，功能和结构，它需要深入的知识来构建应用程序。</code></p>\n<ul>\n<li><p>结合vue详谈</p>\n<blockquote>\n<p>与react相比，vue.js的下载量更少，并且主要用于构建有吸引力的单页面应用程序和Web应用程序。但是，vue.js具有适应性强的体系结构，使其成为广泛使用的框架之一，具有最新的库和包。 </p>\n</blockquote>\n</li>\n</ul>\n<p> <strong>使用vue的优缺点</strong> </p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622071313846.png\" class>\n\n<ul>\n<li>个人看法：中小项目推荐vue，大项目推荐react，具体情况具体分析。</li>\n</ul>\n<h2 id=\"第三章：开发环境搭建\"><a href=\"#第三章：开发环境搭建\" class=\"headerlink\" title=\"第三章：开发环境搭建\"></a>第三章：开发环境搭建</h2><h3 id=\"Node-js安装\"><a href=\"#Node-js安装\" class=\"headerlink\" title=\"Node.js安装\"></a>Node.js安装</h3><p>在开始前，请确保你的电脑安装了node，不知道装没装，就命令行工具node -v 一下，有版本号是成功安装的</p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622072252224.png\" class>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 没安装也不要慌，打开Node中文网址：http://nodejs.cn/</span><br><span class=\"line\">* 下载对应你电脑的版本，要用**稳定版**，切记 。</span><br><span class=\"line\">* 如果你用的英文官网，请看下边这个图这个，表示稳定版本</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622072553595.png\" class>\n\n<ul>\n<li>当然，如果你安装过了，只要版本不是差特别多就没问题，不必重装</li>\n</ul>\n<h3 id=\"安装官方脚手架create-react-app\"><a href=\"#安装官方脚手架create-react-app\" class=\"headerlink\" title=\"安装官方脚手架create-react-app\"></a>安装官方脚手架create-react-app</h3><ul>\n<li><p>这里介绍两种方式，习惯用哪个你自己选<br><strong>第一种</strong><br><code>npm install -g create-react-app</code><br><code>create-react-app myapp</code></p>\n<p><strong>第二种</strong><br><code>npx create-react-app myapp</code></p>\n</li>\n</ul>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622073518837.png\" class>\n\n<ul>\n<li>上述代码的myapp是项目名，可以自定义</li>\n</ul>\n<h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><ul>\n<li>安装完成后，请执行如下命令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myapp</span><br><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>项目名不一定要和我的一致，切换进去，启动就好</li>\n<li><code>npm i -g yarn</code>(可选命令)</li>\n<li>此外，你如果全局安装了yarn，用yarn start启动也行</li>\n<li>安装过程可能有点慢，稍等一会儿</li>\n</ul>\n<p> <strong>效果图</strong> </p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622074305705.png\" class>\n\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622074249332.png\" class>\n\n<h2 id=\"第四章：目录结构介绍\"><a href=\"#第四章：目录结构介绍\" class=\"headerlink\" title=\"第四章：目录结构介绍\"></a>第四章：目录结构介绍</h2><p>安装完成并初始化项目后，打开项目文件夹，你会看到如下内容<br>我用的yarn，部分文件和npm的有差异，问题不大</p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622074648146.png\" class>\n\n<blockquote>\n<ul>\n<li>README.md——项目说明文件，先不用管它，等托管github或实际工作使用以markdown语法编写就好</li>\n<li>package.json——webpack配置和项目包管理文件，里边有些命令脚本和依赖，先不用管它</li>\n<li>lock文件——package-lock.json或者yarn.lock都是锁定安装版本号的，保证你托管GitHub后大家下载安装的依赖是一致的</li>\n<li>gitignore——git配置忽略文件，不需要上传的可以写里边，比如node_modules文件夹</li>\n<li>node_modules——项目依赖包，如果你学过node，对这个应该很熟悉</li>\n<li>public——开放出去的公共资源，如果你想读取本地json，请放这个目录下</li>\n<li>src——放源码的位置，也是对我们开发者而言最核心的东西</li>\n</ul>\n</blockquote>\n<h3 id=\"public文件夹详解\"><a href=\"#public文件夹详解\" class=\"headerlink\" title=\"public文件夹详解\"></a>public文件夹详解</h3><p>初始化项目后，里边有三个小东西</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon.ico : 网站图标，看，就是这玩意</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622075909285.png\" class>\n\n<p> index.html : 首页的模板文件，注释啥玩意的可以删了 </p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622080039613.png\" class>\n\n<ul>\n<li>这行代码在禁用js时候生效</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainifest.json：移动端配置文件，先不用管。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src文件夹详解\"><a href=\"#src文件夹详解\" class=\"headerlink\" title=\"src文件夹详解\"></a>src文件夹详解</h3><ul>\n<li><p>这个目录里边放的是源代码，也是核心文件夹</p>\n<p>index.js : 项目的入口文件，根组件挂载根元素</p>\n</li>\n</ul>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622080413857.png\" class>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.css ：样式表，不用管</span><br><span class=\"line\">App.js : 根组件</span><br><span class=\"line\">serviceWorker.js:移动端离线浏览相关，先不用管</span><br><span class=\"line\">logo.svg :一个小图片，也不用管</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hello-world初识\"><a href=\"#hello-world初识\" class=\"headerlink\" title=\"hello world初识\"></a>hello world初识</h3><p>为了后续开发方便，我们把目录精简一下，去掉css，图片等没用的东西,来个hello world</p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622080906782.png\" class>\n\n<ul>\n<li> 记得把导入的语句一同删除（删除后文件不存在导入会报错） </li>\n</ul>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622081038446.png\" class>\n\n<p> <strong>App.js</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> &gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      hello world</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622081318141.png\" class>\n\n<ul>\n<li>搞完了这样，页面干净的只有hello world，跑在默认的3000端口</li>\n</ul>\n<hr>\n<h2 id=\"第五章：类组件和函数组件的编写\"><a href=\"#第五章：类组件和函数组件的编写\" class=\"headerlink\" title=\"第五章：类组件和函数组件的编写\"></a>第五章：类组件和函数组件的编写</h2><p>在react中，一切皆组件。传统布局头部，左侧导航，主体内容，尾部，都可以看作是一个个组件，独立维护。这像搭积木，一块块的小组件最终搞出个小房子。react组件分为两种，函数组件和类组件，两者都会用到。相比之下，类组件更普遍，但如果组件中不涉及业务逻辑，函数组件更好用些。下边举个例子说明什么二者区别。</p>\n<p><strong>简单的函数组件</strong></p>\n<ul>\n<li>你也许会感到意外，这就是函数组件了？没错，就是这样。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Header</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是头部<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如何使用呢？</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span>/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 仔细观察，你会发现App组件也是个函数组件。此外，组件不管是定义还是使用都是大写。确实这样，react中，区分组件和HTML标签的方式就是大小写。大写的以组件方式解析，小写的以HTML标签解析。对了，单双标签无所谓，看个人习惯。 </p>\n<hr>\n<h3 id=\"简单的类组件\"><a href=\"#简单的类组件\" class=\"headerlink\" title=\"简单的类组件\"></a>简单的类组件</h3><p> 真正有关键字定义类是es6开始的，用class。下面用类组件改写上述App函数组件，实现相同的效果，输出hello world </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                hello world</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>也许你不太理解上边的import React, {Component} from ‘react’，那个大花括号，是es6的语法，解构赋值，推荐参考下阮一峰大神的es6入门</p>\n<ul>\n<li>代码中不会再写var，用let或const代替，详情参见let</li>\n<li>要是不理解，也可以拆分来写<br>import React from ‘react’<br>const Component = React.Component</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = React.Component;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        hello world</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>export default App; 这句话是将组件暴露出去，需要的时候用import引入</li>\n</ul>\n<h3 id=\"图片资源，样式表引用问题\"><a href=\"#图片资源，样式表引用问题\" class=\"headerlink\" title=\"图片资源，样式表引用问题\"></a>图片资源，样式表引用问题</h3><ul>\n<li>在react中，图片引入是有讲究的，分为本地图片引入和网络图片引用</li>\n<li>网络图片引用和以前一样，img标签src属性写图片链接地址就行</li>\n<li>本地图片这样不行，需要以路径形式导入，也要有alt属性</li>\n</ul>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622092458703.png\" class>\n\n<ul>\n<li>你是否注意到，你在js文件居然引入了css文件！！！</li>\n<li>这都是脚手架中webpack帮我们做的</li>\n<li>如果你还不清楚webpack，请参考 <a href=\"https://www.webpackjs.com/\">https://www.webpackjs.com/</a></li>\n</ul>\n<h2 id=\"第六章：jsx语法\"><a href=\"#第六章：jsx语法\" class=\"headerlink\" title=\"第六章：jsx语法\"></a>第六章：jsx语法</h2><h3 id=\"jsx简介\"><a href=\"#jsx简介\" class=\"headerlink\" title=\"jsx简介\"></a>jsx简介</h3><p> jsx是Javascript和XML结合的一种语法糖，它可以让我们更快的编写代码，属于html+js混写。这种语法最先在react中使用，后来vue中也可以，但不常见。jsx语法用熟悉了自然是快的，但对初学者而言，并不是很容易理解。 </p>\n<p><strong>jsx的优势</strong><br>详情参见 <a href=\"https://www.cnblogs.com/clearyang/p/6899639.html\">https://www.cnblogs.com/clearyang/p/6899639.html</a></p>\n<ul>\n<li>这里简单举个例子<br>jsx遇到&lt;，就当作HTML解析，遇到{就当JavaScript解析.</li>\n</ul>\n<p>比如我们写一段JSX语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;1+2&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622094428181.png\" class>\n\n<ul>\n<li>可以看到，除了h1的语义，js表达式也被识别了</li>\n</ul>\n<h3 id=\"jsx踩坑\"><a href=\"#jsx踩坑\" class=\"headerlink\" title=\"jsx踩坑\"></a>jsx踩坑</h3><ul>\n<li>jsx中不允许用class属性，需用className代替</li>\n<li>组件名必须大写</li>\n<li>事件必须修正this指针，且绑定事件名时要使用小驼峰的写法onclick必须写成onClick</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">super</span>(props)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.fun = <span class=\"built_in\">this</span>.fun.bind(<span class=\"built_in\">this</span>)      </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">onClick = &#123;<span class=\"function\">() =&gt;</span> ()&#125; <span class=\"comment\">//绑定的事件名小驼峰写法</span></span><br><span class=\"line\">onClick = &#123;<span class=\"built_in\">this</span>.fun.bind(<span class=\"built_in\">this</span>)&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p> 如果写行内样式用双花括号<code>&#123;&#123;&#125;&#125;</code> <code>hello</code> </p>\n</li>\n<li><p>jsx中不允许label标签使用for属性，需用htmlFor代替</p>\n</li>\n<li><p>jsx中所有的标签都必须闭合，<code> </code>不行,必须<code> </code></p>\n</li>\n<li><p>jsx中注释比较讲究，<code>&#123;/*JSX 中的注释方式*/&#125;</code>,单行也可以</p>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//jsx单行注释</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> jsx语法中最外层必须有一个包裹元素，这样不行 </p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622095241342.png\" class>\n\n<p> 如果不想加一个额外元素，可以用Fragment官方提供的占位符 </p>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622095500728.png\" class>\n\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622095440861.png\" class>\n\n<h3 id=\"jsx中使用三元运算符\"><a href=\"#jsx中使用三元运算符\" class=\"headerlink\" title=\"jsx中使用三元运算符\"></a>jsx中使用三元运算符</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;false?&quot;hello&quot;:&quot;world&quot;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>false 显示world，true显示hello</li>\n</ul>\n<h2 id=\"第七章-传统实例-todoList\"><a href=\"#第七章-传统实例-todoList\" class=\"headerlink\" title=\"第七章 传统实例-todoList\"></a>第七章 传统实例-todoList</h2><ul>\n<li>巴拉巴拉了半天，都是零碎的知识点，下边就用一个比较有代表意义的todoList实例来进一步体会react。</li>\n</ul>\n<h3 id=\"新建TodoList\"><a href=\"#新建TodoList\" class=\"headerlink\" title=\"新建TodoList\"></a>新建TodoList</h3><ul>\n<li>将src下的App.js删除，新建TodoList.js,然后将index.js要导入的文件和挂载的组件一并修改</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TodoList&#x27;</span>;<span class=\"comment\">//注意点1</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> serviceWorker <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./serviceWorker&#x27;</span>;</span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));<span class=\"comment\">//注意点2</span></span><br><span class=\"line\">serviceWorker.unregister();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完善TodoList-js\"><a href=\"#完善TodoList-js\" class=\"headerlink\" title=\"完善TodoList.js\"></a>完善TodoList.js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React,&#123;Fragment&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = React.Component</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span> 添加 <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">               <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>学习react<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>学习vue<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">               <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span> </span></span><br><span class=\"line\"><span class=\"xml\">     <span class=\"tag\">&lt;/<span class=\"name\">Fragment</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoList;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>样式不是重点，最后会美化一下，先凑合着看</li>\n<li>注意最外层包裹元素的事</li>\n</ul>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622102941108.png\" class>\n\n<h2 id=\"第八章：响应式设计原理和数据的绑定方法\"><a href=\"#第八章：响应式设计原理和数据的绑定方法\" class=\"headerlink\" title=\"第八章：响应式设计原理和数据的绑定方法\"></a>第八章：响应式设计原理和数据的绑定方法</h2><h3 id=\"响应式设计\"><a href=\"#响应式设计\" class=\"headerlink\" title=\"响应式设计\"></a>响应式设计</h3><ul>\n<li> react中文文档有这样一段话 </li>\n</ul>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622120651916.png\" class>\n\n<p> 核心就是以数据驱动视图的改变。react并不建议你直接操作DOM元素,而是要通过数据进行驱动，改变界面中的效果。数据变了，视图就变了。mvvm框架都是如此，包括vue，也是数据驱动的形式改变视图。这对于开发者而言十分友好，只需要关注数据本身，大大提升了开发效率。 </p>\n<p> <strong>关于vue，react，jquery的一些思考</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 补充一点，虽然react，vue，angular都有操控dom的钩子ref，但都不建议操作dom解决问题，除非是一些不涉及数据本身的特殊问题。</span><br><span class=\"line\">* 在《深入浅出Reqct和Redux》这本书中，有这样一个观点：react天生就是取代jQuery的。</span><br><span class=\"line\">* 由于历史遗留问题，jquery的市场份额依旧不小，但操控dom性能消耗确实大。</span><br><span class=\"line\">* vue，react这种虚拟dom的设计思想底层仅仅是创建js对象，比较前后js对象是否一致，从而决定是否重新渲染，渲染哪部分。</span><br><span class=\"line\">* 相比之下，创建对象的性能消耗肯定比创建dom低很多，jquery退出历史舞台是大势所趋。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><ul>\n<li>需求：添加事务todo-item<br><code>思考： 上边说了响应式数据， 数据不能写死，要动态绑定数据。那么在哪里绑定呢？</code></li>\n<li>答案是：<strong>写在构造函数里</strong></li>\n<li>类在被加载的时候，构造函数就会被执行，不需要手动调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//调用父类的构造函数，固定写法</span></span><br><span class=\"line\"><span class=\"comment\">//虽然props不用可以不写，但官方推荐你这样写</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props) </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state=&#123;</span><br><span class=\"line\">        <span class=\"attr\">inputValue</span>:<span class=\"string\">&#x27;&#x27;</span> , <span class=\"comment\">// 关联input输入的值</span></span><br><span class=\"line\">        <span class=\"attr\">list</span>:[]    <span class=\"comment\">//事务列表</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果你学过vue，这里会更容易理解，在数据绑定这一块，vue和react差不多</span><br></pre></td></tr></table></figure>\n\n<p>绑定语法很简单，就一句话：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.inputValue&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个时候，你可以试着改变构造函数中inputValue的值，你会发现，页面数据立刻变了。</li>\n<li>此时，并不是完全没有毛毛问题的，打开控制台，你会发现这样有一个警告</li>\n</ul>\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622123219745.png\" class>\n\n<ul>\n<li>提示你在没有onChange事件处理函数的情况下为表单控件设置了value属性，这将呈现只读字段。如果字段应该是可变的，使用“defaultvalue”。否则，设置“onchange”或“readonly”。</li>\n<li>说了一大堆，加个onChange事件处理函数就行了</li>\n</ul>\n<h3 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h3><ul>\n<li>这个事件绑定也很简单，一句话的事：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.inputValue&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.changeInputValue&#125;</span> /&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，onChange必须小驼峰</li>\n<li>上边只是绑定了，但是这个方法我们还没有定义</li>\n<li>这里定义方法this的指向是个大坑，一会儿会遇到</li>\n<li>我们现在要做的是获取输入的值，并赋值给state的inputValu</li>\n<li>可以用事件参数e.target.value获取输入值</li>\n<li>在render外先定义个方法</li>\n<li>也许你想这样写</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">changeInputValue</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.state.inputValue=e.target.value</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这样你就入坑了</li>\n</ul>\n<p><strong>问题分析</strong></p>\n<ul>\n<li>react不允许直接对状态进行修改，需要使用this.setState方法</li>\n<li>this的指向有问题，上下文this不一致</li>\n</ul>\n<p>一步步解决<br><code>解决问题1</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeInputValue(e)&#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        inputValue:e.target.value</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 解决问题2 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onChange=&#123;<span class=\"built_in\">this</span>.changeInputValue.bind(<span class=\"built_in\">this</span>)&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2020/02/16/react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93-%E4%B8%80/20190622131244195.png\" class>\n\n<ul>\n<li>也可以不绑定，方法定义时候用箭头函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeInputValue = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: e.target.value</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[{"name":"react","slug":"react","count":2,"path":"api/tags/react.json"}]}