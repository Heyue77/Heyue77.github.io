{"title":"vue3学习之composition API","slug":"vue3学习之composition-API","date":"2021-08-15T13:23:43.000Z","updated":"2022-02-15T13:43:27.447Z","comments":true,"path":"api/articles/vue3学习之composition-API.json","photos":[],"link":"","excerpt":"前言 Vue3 中的新增杀器 —— Composition API : 一组低侵入式的、函数式的 API，它使我们能够更灵活地「组合」组件的逻辑。","covers":["/2021/08/15/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8Bcomposition-API/20220010.png","/2021/08/15/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8Bcomposition-API/20220012.png","/2021/08/15/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8Bcomposition-API/20220013.png"],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p> Vue3 中的新增杀器 —— Composition API : 一组低侵入式的、函数式的 API，它使我们能够更灵活地「组合」组件的逻辑。</p>\n<span id=\"more\"></span>\n\n<p>Composition API 的灵感来自于 React Hooks ，是比 mixin 更强大的存在。它可以提高代码逻辑的可复用性，从而实现与模板的无关性；同时函数式的编程使代码的可压缩性更强。另外，把 Reactivity 模块独立开来，意味着 Vue3.0 的响应式模块可以与其他框架相组合。</p>\n<img src=\"/2021/08/15/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8Bcomposition-API/20220010.png\" class>\n\n<p>如上图，在较大组件的编写中， <code>Composition-Api</code> 可以把复杂组件的逻辑抽地更紧凑，而且可以将公共逻辑进行抽取。</p>\n<p>setup() 函数<br>在学习 Composition-Api 之前，我们需要先了解一下 setup() 函数。 setup() 是 Vue3 中的新增内容。它为基于 Composition API 的新特性提供了统一的入口。</p>\n<p>在Vue3中，定义 methods、watch、computed、data数据 等都放在了 setup() 函数中</p>\n<ol>\n<li>执行时机<br>setup()函数会在created()生命周期之前执行。</li>\n</ol>\n<img src=\"/2021/08/15/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8Bcomposition-API/20220012.png\" class>\n\n<h3 id=\"2-接收props数据\"><a href=\"#2-接收props数据\" class=\"headerlink\" title=\"2. 接收props数据\"></a>2. 接收props数据</h3><p><code>setup()</code> 函数的第一个参数是 <code>props</code> ，组件接收的 <code>props</code> 数据可以在 <code>setup()</code> 函数内访问到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup(props) &#123;</span><br><span class=\"line\">    console.log(props.p1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-context上下文对象\"><a href=\"#3-context上下文对象\" class=\"headerlink\" title=\"3. context上下文对象\"></a>3. context上下文对象</h3><p><code>context</code> 是 <code>setup()</code> 的第二个参数，它是一个上下文对象，可以通过 <code>context</code> 来访问Vue的实例 <code>this</code> 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup(props,context) &#123;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">    console.log(context)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2021/08/15/vue3%E5%AD%A6%E4%B9%A0%E4%B9%8Bcomposition-API/20220013.png\" class>\n\n<blockquote>\n<p> 注意：在 <code>setup()</code> 函数中访问不到Vue的 <code>this</code> 实例 </p>\n</blockquote>\n<h2 id=\"Composition-Api\"><a href=\"#Composition-Api\" class=\"headerlink\" title=\"Composition-Api\"></a>Composition-Api</h2><p>一组低侵入式的、函数式的 API，使得我们能够更灵活地「组合」组件的逻辑。</p>\n<h3 id=\"1-reactive\"><a href=\"#1-reactive\" class=\"headerlink\" title=\"1. reactive()\"></a>1. reactive()</h3><p><code>reactive()</code> 函数接收一个普通的对象，返回出一个响应式对象。</p>\n<blockquote>\n<p> 在Vue2.x的版本中，我们只需要在 <code>data()</code> 中定义一个数据就能将它变为响应式数据，在 Vue3.0 中，需要用 <code>reactive</code> 函数或者 <code>ref</code> 来创建响应式数据。 </p>\n</blockquote>\n<ul>\n<li> 用reactive创建响应式对象 </li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在组件库中引入 reactive</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/    composition-api&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建响应式对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = reactive(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将响应式对象return出去，暴露给模板使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> 使用响应式对象 </li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;当前的count的值为：&#123;&#123;count&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;count++&quot;</span>&gt;</span>点击增加count&lt;  button&gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-ref\"><a href=\"#2-ref\" class=\"headerlink\" title=\"2. ref()\"></a>2. ref()</h3><p><code>ref()</code> 函数可以根据给定的<strong>值</strong>来创建一个响应式的数据对象，返回值是一个<strong>对象</strong>，且只包含一个 <code>.value</code> 属性。</p>\n<ul>\n<li><p>用 ref 创建响应式对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入 ref</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/composition-api&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建响应式对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p> 使用响应式对象 </p>\n</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;当前的count的值为：&#123;&#123;count&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;count++&quot;</span>&gt;</span>点击增加count<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> ref 的注意事项 </li>\n</ul>\n<ol>\n<li>在 setup() 函数内，由 ref() 创建的响应式数据返回的是对象，所以需要用 .value 来访问；而在 setup() 函数外部则不需要 .value ，直接访问即可。</li>\n<li>可以在 reactive 对象中访问 ref() 函数创建的响应式数据。</li>\n<li>新的 ref() 会覆盖旧的 ref() 。</li>\n</ol>\n<ul>\n<li><p>选择 reactive 还是 ref</p>\n<p>这个问题可以深入探讨一下，下次有时间再整理</p>\n</li>\n</ul>\n<h3 id=\"3-computed\"><a href=\"#3-computed\" class=\"headerlink\" title=\"3. computed()\"></a>3. computed()</h3><p><code>computed()</code> 用来创建计算属性，返回值是一个 <code>ref()</code> 实例。按照惯例，使用前需要先引入。</p>\n<ul>\n<li><p>computed创建只读计算属性</p>\n<p>给 <code>computed()</code> 传入一个函数，可以得到一个只读的计算属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个计算属性，使其值比 count 大 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bigCount = computed(<span class=\"function\">() =&gt;</span> count.value + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bigCount.value) <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\">bigCount.value++ <span class=\"comment\">// error 不可写</span></span><br></pre></td></tr></table></figure></li>\n<li><p> computed创建可读可写计算属性 </p>\n</li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 computed 计算属性，传入一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bigCount = computed(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取值函数</span></span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> (count.value + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 赋值函数</span></span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      count.value = val - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给计算属性赋值的操作，会触发 set 函数</span></span><br><span class=\"line\">bigCount.value = <span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"comment\">// 触发 set 函数后，count 的值会被更新</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count.value) <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-readonly\"><a href=\"#4-readonly\" class=\"headerlink\" title=\"4. readonly()\"></a>4. readonly()</h3><p>传入一个响应式对象、普通对象或 ref ，返回一个<strong>只读</strong>的对象代理。这个代理是深层次的，对象内部的数据也是只读的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> copy = readonly(state)</span><br><span class=\"line\"></span><br><span class=\"line\">watchEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 依赖追踪</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(copy.count)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// state 上的修改会触发 copy 上的侦听</span></span><br><span class=\"line\">state.count++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里只读属性不能被修改</span></span><br><span class=\"line\">copy.count++ <span class=\"comment\">// warning!</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-watchEffect\"><a href=\"#5-watchEffect\" class=\"headerlink\" title=\"5. watchEffect()\"></a>5. watchEffect()</h3><p><code>watchEffect()</code> 会立即执行传入的函数，并<strong>响应式侦听其依赖</strong>，并在其依赖变更时重新运行该函数。</p>\n<ul>\n<li> 基本用法 </li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初次直接执行，打印出 0</span></span><br><span class=\"line\">watchEffect(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(count.value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 被侦听的数据发生变化，触发函数打印出 1</span></span><br><span class=\"line\">  count.value++</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> 停止侦听 </li>\n</ul>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stop = watchEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 停止侦听</span></span><br><span class=\"line\">stop()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>更多功能</p>\n<p>请参照 <a href=\"https://composition-api.vuejs.org/zh/api.html#watcheffect\">composition-api 文档 —— watchEffect</a></p>\n</li>\n</ul>\n<h3 id=\"6-watch\"><a href=\"#6-watch\" class=\"headerlink\" title=\"6. watch()\"></a>6. watch()</h3><p><code>composition-api</code> 中的 <code>watch</code> 和 Vue2.x 中是一样的，<code>watch</code> 需要侦听数据，并执行它的侦听回调。默认情况下初次渲染不执行。</p>\n<ul>\n<li><p>watch 与 watchEffect 的不同</p>\n<ol>\n<li>watch 初次渲染不执行</li>\n<li>watch 侦听的更具体</li>\n<li>watch 可以访问侦听数据变化前后的值</li>\n<li>watch 侦听单个数据源</li>\n</ol>\n</li>\n<li><p>侦听的数据可以是个 reactive 创建出的响应式数据（拥有返回值的 getter 函数），也可以是个 ref</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 侦听一个 getter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\">watch(</span><br><span class=\"line\">  <span class=\"function\">() =&gt;</span> state.count,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接侦听一个 ref</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\">watch(count, <span class=\"function\">(<span class=\"params\">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p><code>watch</code> 侦听多个数据源</p>\n<p>在侦听多个数据源时，把参数以数组的形式给 <code>watch</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch([ref1, ref2], <span class=\"function\">(<span class=\"params\">[newRef1, newRef2],   [prevRef1, prevRef2]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>与 <code>watchEffect</code> 同样的更多功能</p>\n<p>请参照 <a href=\"https://composition-api.vuejs.org/zh/api.html#watch\">composition-api 文档 —— watch</a></p>\n</li>\n</ul>\n<h2 id=\"Composition-Api-依赖工具\"><a href=\"#Composition-Api-依赖工具\" class=\"headerlink\" title=\"Composition-Api 依赖工具\"></a>Composition-Api 依赖工具</h2><p>下面介绍一下组合式API的依赖方法集：</p>\n<h3 id=\"1-isRef\"><a href=\"#1-isRef\" class=\"headerlink\" title=\"1. isRef()\"></a>1. isRef()</h3><p><code>isRef()</code> 顾名思义，是用来判断某个值是否为 <code>ref()</code> 创建出来的响应式的值。</p>\n<p>当你需要展开某个可能为 <code>ref()</code> 创建的响应式的值的时候，会用到它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/composition-api&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> unwrapper = isRef(foo) ? foo.value : foo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-toRefs\"><a href=\"#2-toRefs\" class=\"headerlink\" title=\"2. toRefs()\"></a>2. toRefs()</h3><p><code>toRefs()</code> 可以将 <code>reactive()</code> 创建出来的响应式对象转换成<strong>内容为 ref 响应式的值的普通对象</strong></p>\n<blockquote>\n<p>在搞清楚 toRefs() 的用法之前，我们需要先了解一下用 reactive() 和 ref() 创建出来的响应式对象的区别：</p>\n<ol>\n<li>用 reactive() 创建的响应式对象，整个对象是响应式的，而对象里的每一项都是普通的值。当你把它用展开运算符展开后，整个对象的普通值都不是响应式的；</li>\n<li>而用 ref() 创建的响应式的值，本身就是响应式的，并不依赖于其他对象。</li>\n</ol>\n</blockquote>\n<p> 所以当你需要展开 <code>reactive()</code> 创建的响应式对象，又不想让他们失去响应式特点的时候，就需要用 <code>toRefs()</code> 将它进行转换： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; toRefs &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/composition-api&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义响应式数据对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = reactive(&#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义简单的函数，使count每次+1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> add = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        state.count++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将setup函数的内容return出去，供外界使用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将 state 展开导出，同时将其属性都转化为 ref 形式的响应式数据</span></span><br><span class=\"line\">        ...toRefs(state),</span><br><span class=\"line\">        add</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt;当前的count值为：&#123;&#123;count&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;add&quot;&gt;点击+1&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h3><p>请参照 <a href=\"https://composition-api.vuejs.org/zh/api.html#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E9%9B%86\">composition-api 文档 —— 响应式系统工具集</a></p>\n","categories":[],"tags":[{"name":"vue3","slug":"vue3","count":3,"path":"api/tags/vue3.json"}]}